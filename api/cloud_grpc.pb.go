// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/cloud.proto

package cloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudClient is the client API for Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (Cloud_HandleClient, error)
}

type cloudClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudClient(cc grpc.ClientConnInterface) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) Handle(ctx context.Context, opts ...grpc.CallOption) (Cloud_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cloud_ServiceDesc.Streams[0], "/cloud.Cloud/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudHandleClient{stream}
	return x, nil
}

type Cloud_HandleClient interface {
	Send(*FromDevice) error
	Recv() (*ToDevice, error)
	grpc.ClientStream
}

type cloudHandleClient struct {
	grpc.ClientStream
}

func (x *cloudHandleClient) Send(m *FromDevice) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudHandleClient) Recv() (*ToDevice, error) {
	m := new(ToDevice)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudServer is the server API for Cloud service.
// All implementations must embed UnimplementedCloudServer
// for forward compatibility
type CloudServer interface {
	Handle(Cloud_HandleServer) error
	mustEmbedUnimplementedCloudServer()
}

// UnimplementedCloudServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServer struct {
}

func (UnimplementedCloudServer) Handle(Cloud_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedCloudServer) mustEmbedUnimplementedCloudServer() {}

// UnsafeCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServer will
// result in compilation errors.
type UnsafeCloudServer interface {
	mustEmbedUnimplementedCloudServer()
}

func RegisterCloudServer(s grpc.ServiceRegistrar, srv CloudServer) {
	s.RegisterService(&Cloud_ServiceDesc, srv)
}

func _Cloud_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudServer).Handle(&cloudHandleServer{stream})
}

type Cloud_HandleServer interface {
	Send(*ToDevice) error
	Recv() (*FromDevice, error)
	grpc.ServerStream
}

type cloudHandleServer struct {
	grpc.ServerStream
}

func (x *cloudHandleServer) Send(m *ToDevice) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudHandleServer) Recv() (*FromDevice, error) {
	m := new(FromDevice)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Cloud_ServiceDesc is the grpc.ServiceDesc for Cloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.Cloud",
	HandlerType: (*CloudServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _Cloud_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cloud.proto",
}
